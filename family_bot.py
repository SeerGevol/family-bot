from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, filters
from datetime import datetime
import sqlite3
import random

ALLOWED_USERS = [7666108269, 1278614067]

def is_allowed(user_id):
    return user_id in ALLOWED_USERS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø Family, –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "/todo - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/memory - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/challenge - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π\n"
        "/addgoal - –î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—É—é —Ü–µ–ª—å\n"
        "/goals - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π\n"
        "/setdate - –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∂–Ω—É—é –¥–∞—Ç—É\n"
        "/dates - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞–º—è—Ç–Ω—ã–µ –¥–∞—Ç—ã\n"
        "/help - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã\n"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    await update.message.reply_text(
        "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/todo - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/memory - –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/challenge - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π\n"
        "/addgoal - –î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—É—é —Ü–µ–ª—å\n"
        "/goals - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π\n"
        "/setdate - –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∂–Ω—É—é –¥–∞—Ç—É\n"
        "/dates - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞–º—è—Ç–Ω—ã–µ –¥–∞—Ç—ã\n"
    )

async def challenge_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    challenges = [
        "–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∑–∞ —á—Ç–æ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.",
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –ª—é–±–∏–º–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏–∑ –≤–∞—à–µ–≥–æ –æ–±—â–µ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ.",
        "–ó–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ–º –≤ –ª—é–±–≤–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä—É.",
        "–°–¥–µ–ª–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π —Å—é—Ä–ø—Ä–∏–∑: –∑–∞–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –µ–¥—ã –∏–ª–∏ —á–µ–≥–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞.",
        "–£—Å—Ç—Ä–æ–π—Ç–µ –æ–Ω–ª–∞–π–Ω-–≤–µ—á–µ—Ä: –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ –≤–º–µ—Å—Ç–µ, —Å–æ–∑–≤–æ–Ω–∏–≤—à–∏—Å—å –≤ –≤–∏–¥–µ–æ-—á–∞—Ç–µ.",
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –º–µ—á—Ç–æ–π –∏–ª–∏ —Ü–µ–ª—å—é, –æ –∫–æ—Ç–æ—Ä–æ–π –µ—â—ë –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª–∏.",
        "–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É 5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ª—é–±–∏—Ç–µ –≤ –ø–∞—Ä—Ç–Ω—ë—Ä–µ.",
        "–°–¥–µ–ª–∞–π—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ –ø–µ—Å–µ–Ω, –∫–æ—Ç–æ—Ä—ã–µ –∞—Å—Å–æ—Ü–∏–∏—Ä—É—é—Ç—Å—è —Å –≤–∞—à–∏–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏, –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º.",
        "–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏—è—Ç–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.",
        "–û–±—Å—É–¥–∏—Ç–µ, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—É—Å–∫, –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É.",
        "–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –ø–∏—Å—å–º–æ –æ—Ç —Ä—É–∫–∏, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É.",
        "–°–æ–∑–¥–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å –ø–µ—Ä–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞.",
        "–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –Ω–∞ –≥–æ–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å –≤–º–µ—Å—Ç–µ."
    ]
    challenge = random.choice(challenges)
    await update.message.reply_text(f"–í–∞—à —á–µ–ª–ª–µ–Ω–¥–∂: {challenge}")

async def add_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ü–µ–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /addgoal –°—ä–µ–∑–¥–∏—Ç—å –≤ –ü–∞—Ä–∏–∂")
        return

    goal = " ".join(context.args)
    conn = sqlite3.connect("family_bot.db")
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS goals (id INTEGER PRIMARY KEY, goal TEXT)")
    cursor.execute("INSERT INTO goals (goal) VALUES (?)", (goal,))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"–¶–µ–ª—å \"{goal}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫!")

async def goals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    conn = sqlite3.connect("family_bot.db")
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS goals (id INTEGER PRIMARY KEY, goal TEXT)")
    cursor.execute("SELECT goal FROM goals")
    goals = cursor.fetchall()
    conn.close()

    if goals:
        goals_list = "\n".join([f"- {goal[0]}" for goal in goals])
        await update.message.reply_text(f"–í–∞—à–∏ —Ü–µ–ª–∏:\n{goals_list}")
    else:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø—É—Å—Ç.")

async def set_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /setdate –î–∞—Ç–∞ –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /setdate 2025-01-01 –ì–æ–¥–æ–≤—â–∏–Ω–∞)")
        return

    date = context.args[0]
    description = " ".join(context.args[1:])
    conn = sqlite3.connect("family_bot.db")
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS dates (id INTEGER PRIMARY KEY, date TEXT, description TEXT)")
    cursor.execute("INSERT INTO dates (date, description) VALUES (?, ?)", (date, description))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"–î–∞—Ç–∞ \"{description}\" –Ω–∞ {date} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

async def dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    conn = sqlite3.connect("family_bot.db")
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS dates (id INTEGER PRIMARY KEY, date TEXT, description TEXT)")
    cursor.execute("SELECT date, description FROM dates ORDER BY date")
    dates = cursor.fetchall()
    conn.close()

    if dates:
        dates_list = "\n".join([f"{date[0]} - {date[1]}" for date in dates])
        await update.message.reply_text(f"–í–∞—à–∏ –ø–∞–º—è—Ç–Ω—ã–µ –¥–∞—Ç—ã:\n{dates_list}")
    else:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–∞–º—è—Ç–Ω—ã—Ö –¥–∞—Ç –ø—É—Å—Ç.")

def main():
    app = Application.builder().token("7916153118:AAGFNBgZ6u9IFeooVqpW_NgAACxIfNJyz1Y").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("challenge", challenge_command))
    app.add_handler(CommandHandler("addgoal", add_goal))
    app.add_handler(CommandHandler("goals", goals))
    app.add_handler(CommandHandler("setdate", set_date))
    app.add_handler(CommandHandler("dates", dates))
    app.run_polling()

if __name__ == "__main__":
    main()
