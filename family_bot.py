from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import sqlite3
import random
from dotenv import load_dotenv
import os
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –£–∫–∞–∂–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
ALLOWED_USERS = [7666108269, 1278614067]

def is_allowed(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º."""
    return user_id in ALLOWED_USERS

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    conn = sqlite3.connect("family_bot.db")
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS gratitude (id INTEGER PRIMARY KEY, user TEXT, message TEXT, timestamp TEXT)")
    cursor.execute("CREATE TABLE IF NOT EXISTS dates (id INTEGER PRIMARY KEY, date TEXT, description TEXT)")
    cursor.execute("CREATE TABLE IF NOT EXISTS emotions (id INTEGER PRIMARY KEY, user TEXT, mood TEXT, timestamp TEXT)")
    cursor.execute("CREATE TABLE IF NOT EXISTS list_items (id INTEGER PRIMARY KEY, item TEXT)")
    cursor.execute("CREATE TABLE IF NOT EXISTS goals (id INTEGER PRIMARY KEY, goal TEXT)")
    cursor.execute("CREATE TABLE IF NOT EXISTS photos (id INTEGER PRIMARY KEY, user TEXT, file_id TEXT, timestamp TEXT)")
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("‚ú® –î–æ–±–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", callback_data="gratitude")],
        [InlineKeyboardButton("üì∏ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º", callback_data="view_album")],
        [InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂", callback_data="challenge")],
        [InlineKeyboardButton("üß© –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–∞–¥–∫—É", callback_data="riddle")],
        [InlineKeyboardButton("üìÖ –ü–∞–º—è—Ç–Ω—ã–µ –¥–∞—Ç—ã", callback_data="dates")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, *{user.first_name}*!\n"
        "–Ø _Family Bot_ ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "‚ú® /gratitude - –î–æ–±–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å\n"
        "üìñ /viewgratitudes - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏\n"
        "üõí /additem - –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
        "üõçÔ∏è /viewitems - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
        "‚ùå /removeitem - –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫\n"
        "üéØ /addgoal - –î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—É—é —Ü–µ–ª—å\n"
        "üèÜ /goals - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π\n"
        "üìÖ /setdate - –î–æ–±–∞–≤–∏—Ç—å –ø–∞–º—è—Ç–Ω—É—é –¥–∞—Ç—É\n"
        "üóìÔ∏è /dates - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞–º—è—Ç–Ω—ã–µ –¥–∞—Ç—ã\n"
        "üì∏ /addphoto - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º\n"
        "üé• /viewalbum - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å –∞–ª—å–±–æ–º\n"
        "üïí /morning - –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üåô /evening - –í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üòä /mood - –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º\n"
        "üß© /riddle - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–∞–¥–∫—É\n"
        "üéâ /challenge - –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π!",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ /morning
async def morning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –º–æ—è –ª—é–±–æ–≤—å! ‚òÄÔ∏è –ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –Ω–∞—á–Ω–µ—Ç—Å—è —Å —É–ª—ã–±–∫–∏!")

# –ö–æ–º–∞–Ω–¥–∞ /evening
async def evening(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤! üåô –í—Ä–µ–º—è —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å, –∑–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å.")

# –ö–æ–º–∞–Ω–¥–∞ /mood
async def mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /mood –°—á–∞—Å—Ç–ª–∏–≤—ã–π.")
        return

    mood_text = " ".join(context.args)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    conn = sqlite3.connect("family_bot.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO emotions (user, mood, timestamp) VALUES (?, ?, ?)",
                   (update.effective_user.username, mood_text, timestamp))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"üòä –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {mood_text}")

# –ö–æ–º–∞–Ω–¥–∞ /setdate
async def setdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /setdate 2023-01-01 –ù–æ–≤—ã–π –≥–æ–¥")
        return

    date = context.args[0]
    description = " ".join(context.args[1:])
    conn = sqlite3.connect("family_bot.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO dates (date, description) VALUES (?, ?)", (date, description))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"üìÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {date} - {description}")

# –ö–æ–º–∞–Ω–¥–∞ /addphoto
async def addphoto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π.")
        return

    photo_file = update.message.photo[-1].file_id
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    conn = sqlite3.connect("family_bot.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO photos (user, file_id, timestamp) VALUES (?, ?, ?)",
                   (update.effective_user.username, photo_file, timestamp))
    conn.commit()
    conn.close()

    await update.message.reply_text("üì∏ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–ª—å–±–æ–º!")

# –ö–æ–º–∞–Ω–¥–∞ /viewalbum
async def viewalbum(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("family_bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT file_id FROM photos")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("üé• –í–∞—à —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    for row in rows:
        await update.message.bot.send_photo(chat_id=update.effective_chat.id, photo=row[0])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /riddle
async def riddle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    riddles =[ 
        {"question": "–ß—Ç–æ –≤—Å–µ–≥–¥–∞ —Ä–∞—Å—Ç–µ—Ç, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è?", "answer": "–í–æ–∑—Ä–∞—Å—Ç"},
        {"question": "–ß—Ç–æ –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å, –Ω–µ –∫–∞—Å–∞—è—Å—å?", "answer": "–û–±–µ—â–∞–Ω–∏–µ"},
        {"question": "–ö–∞–∫–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ó–µ–º–ª–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –Ω–µ–±—É?", "answer": "–ì–æ—Ä–∞"},
        {"question": "–ß—Ç–æ –Ω–µ–ª—å–∑—è —Å—ä–µ—Å—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫?", "answer": "–û–±–µ–¥ –∏ —É–∂–∏–Ω"},
        {"question": "–£ —á–µ–≥–æ –Ω–µ—Ç –Ω–∞—á–∞–ª–∞, –∫–æ–Ω—Ü–∞ –∏ —Å–µ—Ä–µ–¥–∏–Ω—ã?", "answer": "–ö–æ–ª—å—Ü–æ"},
        {"question": "–ß—Ç–æ –≤—Å–µ–≥–¥–∞ —Ä–∞—Å—Ç–µ—Ç, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è?", "answer": "–í–æ–∑—Ä–∞—Å—Ç"},
        {"question": "–í–∏—Å–∏—Ç –≥—Ä—É—à–∞ ‚Äî –Ω–µ–ª—å–∑—è —Å–∫—É—à–∞—Ç—å. –ß—Ç–æ —ç—Ç–æ?", "answer": "–õ–∞–º–ø–æ—á–∫–∞"},
        {"question": "–ö–∞–∫–∞—è –ø—Ç–∏—Ü–∞ —Å–∞–º–∞—è —É–º–Ω–∞—è?", "answer": "–°–æ–≤–∞"}
    ]
    selected_riddle = random.choice(riddles)
    context.user_data['riddle'] = selected_riddle
    await update.message.reply_text(f"üß© –ó–∞–≥–∞–¥–∫–∞: {selected_riddle['question']}")

# –ö–æ–º–∞–Ω–¥–∞ /challenge
async def challenge_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    challenges = [
        "üíå –ù–∞–ø–∏—à–∏—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –¥—Ä—É–≥—É.",
        "üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞ –ø—Ä–æ–≥—É–ª–∫–µ.",
        "üç¥ –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –Ω–æ–≤–æ–µ –±–ª—é–¥–æ.",
        "üìö –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ–¥–Ω—É –≥–ª–∞–≤—É –∫–Ω–∏–≥–∏.",
        "üèÉ –ü—Ä–æ–π–¥–∏—Ç–µ 10 000 —à–∞–≥–æ–≤.",
        "üéµ –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –ø–µ—Å–µ–Ω.",
        "üì∏ –ù–∞–π–¥–∏—Ç–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –ª—é–±–∏–º—ã–º —Å–Ω–∏–º–∫–æ–º.",
        "üéØ –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ü–µ–ª—å –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.",
        "üí° –ò–∑—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç.",
        "üç¥ –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –Ω–æ–≤–æ–µ –±–ª—é–¥–æ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏.",
        "üìñ –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≥–ª–∞–≤—É –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏ –∏ –æ–±—Å—É–¥–∏—Ç–µ —Å –∫–µ–º-—Ç–æ.",
        "üé• –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –¥–∞–≤–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª–∏."
    ]
    challenge = random.choice(challenges)
    await update.message.reply_text(f"üéâ –í–∞—à —á–µ–ª–ª–µ–Ω–¥–∂: {challenge}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("morning", morning))
    app.add_handler(CommandHandler("evening", evening))
    app.add_handler(CommandHandler("mood", mood))
    app.add_handler(CommandHandler("setdate", setdate))
    app.add_handler(CommandHandler("addphoto", addphoto))
    app.add_handler(CommandHandler("viewalbum", viewalbum))
    app.add_handler(CommandHandler("riddle", riddle))
    app.add_handler(CommandHandler("challenge", challenge_command))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
